{"version":3,"sources":["components/dynamic/dynamic.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAgBa,gBAAgB;gBAczB,0BAAoB,WAA2B,EAAU,iBAA2C,EAAU,IAAU;oBAApG,gBAAW,GAAX,WAAW,CAAgB;oBAAU,sBAAiB,GAAjB,iBAAiB,CAA0B;oBAAU,SAAI,GAAJ,IAAI,CAAM;oBAXhH,UAAK,GAAG,aAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBAGxB,uBAAkB,GAAG,KAAK,CAAC;oBACrC,UAAK,GAAG;wBACJ,IAAI,EAAE,+BAA+B;wBACrC,WAAW,EAAE,sFAAsF;wBACnG,GAAG,EAAE,IAAI,CAAC,KAAK;wBACf,IAAI,EAAE,IAAI;wBACV,YAAY,EAAE,EAAE;qBACnB,CAAC;oBAOF,qBAAgB,GAAQ,IAAI,CAAC;oBALzB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,uBAAU,CAAS,UAAC,QAA4B;wBAClE,WAAW,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,EAApC,CAAoC,EAAE,IAAI,CAAC,CAAC;oBAClE,CAAC,CAAC,CAAC;gBACP,CAAC;gBAAA,CAAC;gBAGK,mCAAQ,GAAf;oBAAA,iBAuCC;oBAtCG,sDAAsD;oBACtD,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;wBACpB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;oBAChC,CAAC;oBAED,IAAI,QAAQ,GAAG,2gBAMlB,CAAC;oBAEE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gFAAgF,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG;wBACzG,KAAI,CAAC,KAAK,CAAC,YAAY,GAAG;4BACtB,KAAK,EAAE,EAAE,IAAI,EAAE,qBAAqB,EAAE;4BACtC,MAAM,EAAE,CAAC;oCACL,IAAI,EAAE,KAAK;oCACX,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE;oCAChB,OAAO,EAAE;wCACL,aAAa,EAAE,CAAC;qCACnB;iCACJ,CAAC;yBACL,CAAC;wBACF,KAAI,CAAC,WAAW;6BACX,sBAAsB,CAAC,QAAQ,CAAC;6BAChC,IAAI,CAAC,UAAC,OAA2C;4BAC9C,4EAA4E;4BAC5E,KAAI,CAAC,YAAY,GAAG,KAAI;iCACnB,sBAAsB;iCACtB,eAAe,CAAC,OAAO,CAAC,CAAC;4BAE9B,6CAA6C;4BAC7C,IAAI,SAAS,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;4BAE3C,SAAS,CAAC,MAAM,GAAG,KAAI,CAAC,KAAK,CAAC;wBAClC,CAAC,CAAC,CAAC;oBACX,CAAC,CAAC,CAAC;gBACP,CAAC;gBACL,uBAAC;YAAD,CA7DA,AA6DC,IAAA;YA3DG;gBADC,gBAAS,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,uBAAgB,EAAE,CAAC;0CACtB,uBAAgB;4EAAC;YAFxC,gBAAgB;gBAL5B,gBAAS,CAAC;oBACP,QAAQ,EAAE,mBAAmB;oBAC7B,WAAW,EAAE,iDAAiD;iBAEjE,CAAC;iDAemC,+BAAc,EAA6B,+BAAwB,EAAgB,WAAI;eAd/G,gBAAgB,CA6D5B;;QAAA,CAAC","file":"dynamic.component.js","sourcesContent":["import { Component, ComponentRef, ComponentFactoryResolver, ViewChild, ViewContainerRef, ComponentFactory, ReflectiveInjector } from '@angular/core';\r\nimport { timer } from 'rxjs/observable/timer';\r\nimport { IHaveDynamicData, DynamicBuilder } from '../dynamic/dynamicBuilder';\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { FormatDate } from \"../../pipes/formatDate\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Subscriber } from \"rxjs/Subscriber\";\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { ChartModule } from 'angular2-highcharts';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'dynamic-component',\r\n    templateUrl: '/view/components/dynamic/dynamic.component.html',\r\n    //providers: [DynamicBuilder]\r\n})\r\nexport class DynamicComponent {\r\n    @ViewChild('dynamicChild', { read: ViewContainerRef })\r\n    private dynamicComponentTarget: ViewContainerRef;\r\n    private timer = timer(2000, 1000);\r\n\r\n    protected componentRef: ComponentRef<IHaveDynamicData>;\r\n    protected wasViewInitialized = false;\r\n    props = {\r\n        code: 'Angular 2 Dynamic Componenent',\r\n        description: 'This generated the component dynamically with the given HTML string and Json object.',\r\n        obs: this.timer,\r\n        date: null,\r\n        chartOptions: {}\r\n    };\r\n    constructor(private typeBuilder: DynamicBuilder, private componentResolver: ComponentFactoryResolver, private http: Http) {\r\n        this.props.date = new Observable<string>((observer: Subscriber<string>) => {\r\n            setInterval(() => observer.next(new Date().toString()), 1000);\r\n        });\r\n    };\r\n\r\n    currentComponent: any = null;\r\n    public ngOnInit() {\r\n        // We can destroy the old component by calling destroy\n        if (this.componentRef) {\n            this.componentRef.destroy();\n        }\n\r\n        let template = `\r\n      <div class=\"row\"><div class=\"col-md-2\">Title:       </div><div class=\"col-md-4\"><b>{{entity.code}}</b></div></div><br>\r\n      <div class=\"row\"><div class=\"col-md-2\">Description: </div><div class=\"col-md-4\"><b>{{entity.description}}</b></div></div><br>\r\n      <div class=\"row\"><div class=\"col-md-2\">DateTime:    </div><div class=\"col-md-4\"><b>{{entity.date | async | formatDate}}</b></div></div><br>\r\n      <hr />\r\n      <chart type=\"StockChart\" [options]=\"entity.chartOptions\"></chart>\r\n    `;\r\n\r\n        this.http.get('https://cdn.rawgit.com/gevgeny/angular2-highcharts/99c6324d/examples/aapl.json').subscribe(res => {\n            this.props.chartOptions = {\n                title: { text: 'Hitachi Stock Price' },\n                series: [{\n                    name: 'HCL',\n                    data: res.json(),\n                    tooltip: {\n                        valueDecimals: 2\n                    }\n                }]\n            };\n            this.typeBuilder\n                .createComponentFactory(template)\n                .then((factory: ComponentFactory<IHaveDynamicData>) => {\n                    // Target will instantiate and inject component (we'll keep reference to it)\n                    this.componentRef = this\n                        .dynamicComponentTarget\n                        .createComponent(factory);\n\n                    // let's inject @Inputs to component instance\n                    let component = this.componentRef.instance;\n\n                    component.entity = this.props;\n                });\n        });\r\n    }\r\n}"]}