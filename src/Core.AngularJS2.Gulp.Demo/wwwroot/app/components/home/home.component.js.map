{"version":3,"sources":["components/home/home.component.ts"],"names":[],"mappings":"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","file":"home.component.js","sourcesContent":["import { Component, Inject, ViewChild } from \"@angular/core\";\r\n//import { CanvasViewerComponent } from \"../canvas/canvasViewer.component\";\r\nimport { ImageService } from \"../../services/imageService\";\r\nimport { IResponse, IImageOptions, IContainerScanned, IContainerStatus } from \"../../models/viewModels\";\r\nimport { IImageService } from \"../../interfaces/interfaces\";\r\n\r\n@Component({\r\n    selector: \"home\",\r\n    templateUrl: \"/view/components/home/home.component.html\"\r\n})\r\n\r\nexport class HomeComponent {\r\n    title: string;\r\n    imagePath: any;\r\n    img: any;\r\n    //npm install highcharts --save\r\n    //npm install @types/node --save-dev\r\n    //npm install --save-dev gulp-concat - css\r\n    //npm -g install htmlmin\r\n    //npm install --save del\r\n    //npm install --save-dev gulp-load-plugins\r\n    //npm install --save-dev gulp-gzip\r\n    //npm install -g browser-sync\r\n    //npm install gulp-compress\r\n    //npm install angular2-highcharts --save\r\n    //npm install raphael\r\n    //npm i font-awesome - webpack\r\n    //npm install bootstrap\r\n    options: IImageOptions;\r\n    overlays = [];\r\n    imageBytes: any;\r\n    imageAsBytes: any;\r\n    @ViewChild(\"tiffViewer\") tiffViewer;\n    tiffContext: CanvasRenderingContext2D;\n\r\n    constructor( @Inject('IImageService') private imageService: IImageService) {\r\n        var vm = this;\r\n        vm.title = \"Welcome Chirag Gupta\";\r\n        this.imagePath = \"http://localhost:53428/Images/Container.Tiff\";\r\n        //this.imagePath = \"http://localhost:61662/images/test.jpg\";\r\n\r\n        this.overlays = [{ x: 50, y: 155, w: 106, h: 29, color: '#00FF00' }];\n        // @ViewChild('canvasViewer', undefined) canvasViewer: CanvasViewerComponent;\r\n        this.options = {\r\n            ctx: null,\r\n            adsrc: null,\r\n            zoom: {\r\n                value: 1.0,\r\n                step: 0.1,\r\n                min: 0.05,\r\n                max: 6\r\n            },\r\n            rotate: {\r\n                value: 0,\r\n                step: 90\r\n            },\r\n            controls: {\r\n                toolbar: true,\r\n                image: true,\r\n                sound: false,\r\n                fit: 'page',\r\n                disableZoom: false,\r\n                disableMove: false,\r\n                disableRotate: false,\r\n                numPage: 1,\r\n                totalPage: 1,\r\n                filmStrip: false\r\n            },\r\n            info: {}\r\n        };\r\n\r\n        //this.getImageBytes();\r\n    }\r\n    getImageBytes = () => {\r\n        this.imageService.getImageAsByteArrray().subscribe(result => {\r\n            let canvas = this.tiffViewer.nativeElement;\n            this.tiffContext = canvas.getContext(\"2d\");\r\n            this.img = new Image();\r\n\r\n            //var file = new Blob([result._body]);\r\n            //this.imagePath = file;\r\n            //var fileURL = URL.createObjectURL(file);\r\n            //window.open(fileURL);\r\n            //this.img.src = fileURL;\r\n         \r\n            //this.imageBytes = result._body;\r\n            //var uInt8Array = new Uint8Array(this.imageBytes);\r\n            //var i = uInt8Array.length;\r\n            //var binaryString = new Array(i);\r\n            //while (i--) {\r\n            //    binaryString[i] = String.fromCharCode(uInt8Array[i]);\r\n            //}\r\n            //var data = binaryString.join('');\r\n\r\n            //// Base64 encoded image and assign it to the scope\r\n            //this.imageAsBytes = window.btoa(data);\r\n            //console.info(this.imageAsBytes);\r\n\r\n            var base = this.base64ArrayBuffer(result._body);\r\n            this.img.src = \"data:image/png;base64,\" + base;\r\n\r\n            this.tiffContext.drawImage(this.img, 0, 0);\r\n\r\n        });\r\n    }\r\n\r\n \r\n\r\n    onChange(event) {\r\n        this.imagePath = event.srcElement.files[0];\r\n\r\n        let eventObj: MSInputMethodContext = <MSInputMethodContext>event;\r\n        let target: HTMLInputElement = <HTMLInputElement>eventObj.target;\r\n        let files: FileList = target.files;\r\n        //this.imagePath = files[0];\r\n    }\r\n\r\n    \r\n base64ArrayBuffer =  (arrayBuffer) => {\r\n    var base64 = ''\r\n    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\n\r\n    var bytes = new Uint8Array(arrayBuffer)\r\n    var byteLength = bytes.byteLength\r\n    var byteRemainder = byteLength % 3\r\n    var mainLength = byteLength - byteRemainder\r\n\r\n    var a, b, c, d\r\n    var chunk\r\n\r\n    // Main loop deals with bytes in chunks of 3\r\n    for (var i = 0; i < mainLength; i = i + 3) {\r\n        // Combine the three bytes into a single integer\r\n        chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\r\n\r\n        // Use bitmasks to extract 6-bit segments from the triplet\r\n        a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\r\n        b = (chunk & 258048) >> 12 // 258048   = (2^6 - 1) << 12\r\n        c = (chunk & 4032) >> 6 // 4032     = (2^6 - 1) << 6\r\n        d = chunk & 63               // 63       = 2^6 - 1\r\n\r\n        // Convert the raw binary segments to the appropriate ASCII encoding\r\n        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\r\n    }\r\n\r\n    // Deal with the remaining bytes and padding\r\n    if (byteRemainder == 1) {\r\n        chunk = bytes[mainLength]\r\n\r\n        a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\r\n\r\n        // Set the 4 least significant bits to zero\r\n        b = (chunk & 3) << 4 // 3   = 2^2 - 1\r\n\r\n        base64 += encodings[a] + encodings[b] + '=='\r\n    } else if (byteRemainder == 2) {\r\n        chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\r\n\r\n        a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\r\n        b = (chunk & 1008) >> 4 // 1008  = (2^6 - 1) << 4\r\n\r\n        // Set the 2 least significant bits to zero\r\n        c = (chunk & 15) << 2 // 15    = 2^4 - 1\r\n\r\n        base64 += encodings[a] + encodings[b] + encodings[c] + '='\r\n    }\r\n\r\n    return base64\r\n}\r\n\r\n\r\n}\r\n"]}