{"version":3,"sources":["components/integration/integration.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAca,oBAAoB;gBAS7B,8BAAkD,gBAAmC;oBAArF,iBAGC;oBAHiD,qBAAgB,GAAhB,gBAAgB,CAAmB;oBARrF,UAAK,GAAW,oBAAoB,CAAC;oBAarC,uBAAkB,GAAG;wBACjB,KAAI,CAAC,gBAAgB,CAAC,sBAAsB,EAAoB,CAAC,SAAS,CAAC,UAAA,MAAM;4BAC7E,KAAI,CAAC,eAAe,GAAG,MAAM,CAAC;4BAC9B,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,CAAC;4BACnC,KAAI,CAAC,UAAU,GAAG;gCACd,KAAK,EAAE,EAAE,IAAI,EAAE,uBAAuB,EAAE;gCACxC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;gCAEtB,MAAM,EAAE,CAAC;wCACL,IAAI,EAAE,uBAAuB;wCAC7B,YAAY,EAAE,IAAI;wCAClB,IAAI,EAAE,CAAC;gDACH,IAAI,EAAE,oBAAoB;gDAC1B,CAAC,EAAE,KAAI,CAAC,eAAe,CAAC,iBAAiB;6CAC5C,EAAE;gDACC,IAAI,EAAE,gBAAgB;gDACtB,CAAC,EAAE,KAAI,CAAC,eAAe,CAAC,aAAa;6CACxC;4CACD;gDACI,IAAI,EAAE,mBAAmB;gDACzB,CAAC,EAAE,KAAI,CAAC,eAAe,CAAC,cAAc;gDACtC,MAAM,EAAE,IAAI;gDACZ,QAAQ,EAAE,IAAI;6CACjB,CAAC;qCACL,CAAC;6BACL,CAAC;wBAEN,CAAC,CAAC,CAAC;oBAEP,CAAC,CAAA;gBA/BD,CAAC;gBAND,uCAAQ,GAAR;oBACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC9B,CAAC;gBAqCL,2BAAC;YAAD,CA7CA,AA6CC,IAAA;YA7CY,oBAAoB;gBALhC,gBAAS,CAAC;oBACP,QAAQ,EAAE,QAAQ;oBAClB,WAAW,EAAE,yDAAyD;iBACzE,CAAC;gBAWgB,WAAA,aAAM,CAAC,mBAAmB,CAAC,CAAA;;eAThC,oBAAoB,CA6ChC;;QACD,CAAC","file":"integration.component.js","sourcesContent":["import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { NgModule, Component, Inject, forwardRef, Injector, OpaqueToken } from \"@angular/core\";\r\n\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { ChartModule } from 'angular2-highcharts';\r\nimport { IDashboardService } from \"../../interfaces/interfaces\";\r\nimport { DashboardService } from \"../../services/dashboardService\";\r\nimport { IResponse, IContainerScanned, IContainerStatus } from \"../../models/viewModels\";\r\n\r\n@Component({\r\n    selector: \"charts\",\r\n    templateUrl: \"/view/components/integration/integration.component.html\"\r\n})\r\n\r\nexport class IntegrationComponent {\r\n    title: string = \"Integration Charts\";\r\n    pieOptions: any;\r\n\r\n    containerStatus: IContainerStatus;\r\n\r\n    ngOnInit() {\r\n        this.getContainerStatus();\r\n    }\r\n    constructor( @Inject('IDashboardService') private dashboardService: IDashboardService) {\r\n\r\n\r\n    }\r\n\r\n    getContainerStatus = () => {\r\n        this.dashboardService.getContainerScanStatus<IContainerStatus>().subscribe(result => {\r\n            this.containerStatus = result;\r\n            console.info(this.containerStatus);\r\n            this.pieOptions = {\r\n                title: { text: 'Container Scan Status' },\r\n                chart: { type: 'pie' },\r\n\r\n                series: [{\r\n                    name: 'Container Scan Status',\r\n                    colorByPoint: true,\r\n                    data: [{\r\n                        name: 'Ignored Containers',\r\n                        y: this.containerStatus.ignoredContainers\r\n                    }, {\r\n                        name: 'Bad Containers',\r\n                        y: this.containerStatus.badContainers\r\n                    },\r\n                    {\r\n                        name: 'Passed Containers',\r\n                        y: this.containerStatus.goodContainers,\r\n                        sliced: true,\r\n                        selected: true\r\n                    }]\r\n                }]\r\n            };\r\n\r\n        });\r\n\r\n    }\r\n\r\n}\r\n"]}