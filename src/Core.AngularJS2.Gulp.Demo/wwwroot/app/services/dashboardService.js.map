{"version":3,"sources":["services/dashboardService.ts"],"names":["DashboardService","webRequest","this","vm","getContainerScanStatus","get","getWeatherStatus","__decorate","core_1","Injectable","__param","Inject"],"mappings":"05BAUaA,iBAAgB,WAIzB,QAAAA,kBAA2CC,YAAAC,KAAAD,WAAAA,UACvC,IAAIE,IAAKD,IAETC,IAAGC,uBAAyB,WACxB,MAAOH,YAAWI,IAAuB,mCAG7CF,GAAGG,iBAAmB,WAClB,MAAOL,YAAWI,IAAsB,qCAGpD,MAAAL,qBAfaA,iBAAgBO,YAD5BC,OAAAC,aAKiBC,QAAA,EAAAF,OAAAG,OAAO,0DAJZX","file":"dashboardService.js","sourcesContent":["import { Injectable, Inject, forwardRef, Injector, OpaqueToken } from \"@angular/core\";\r\n\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { IResponse, IContainerScanned, IWeatherForecast } from \"../models/viewModels\";\r\nimport { IWebRequest, IDashboardService } from \"../interfaces/interfaces\";\r\nimport { WebRequest } from \"../services/webRequest\";\r\n\r\n\r\n@Injectable()\r\nexport class DashboardService implements IDashboardService {\r\n    getContainerScanStatus: <IContainerScanned>() => Observable<IResponse<IContainerScanned>>;\r\n    getWeatherStatus: <IWeatherForecast>() => Observable<IResponse<IWeatherForecast>>;\r\n\r\n    constructor( @Inject('IWebRequest')private webRequest : IWebRequest) {\r\n        var vm = this;\r\n\r\n        vm.getContainerScanStatus = <IContainerScanned>() => {\r\n            return webRequest.get<IContainerScanned>(\"/api/GetContainerScannedStatus\");\r\n        }\r\n\r\n        vm.getWeatherStatus = <IWeatherForecast>() => {\r\n            return webRequest.get<IWeatherForecast>(\"/api/SampleData/WeatherForecasts\");\r\n        }\r\n    }\r\n}"]}