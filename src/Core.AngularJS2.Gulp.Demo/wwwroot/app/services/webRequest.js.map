{"version":3,"sources":["services/webRequest.ts"],"names":[],"mappings":"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","file":"webRequest.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response, RequestOptions, Headers, Request, RequestMethod, ResponseContentType, URLSearchParams } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { IResponse } from \"../models/viewModels\";\r\nimport { IWebRequest } from \"../interfaces/interfaces\";\r\n\r\n@Injectable()\r\nexport class WebRequest implements IWebRequest {\r\n    get: <T>(url: string, data?: any, header?: any, goToErrorState?: boolean) => Observable<T>;\r\n    post: <T>(url: string, data?: any, header?: any, goToErrorState?: boolean) => Observable<T>;\r\n    getImage: <T>(url: string, data?: any, header?: any, goToErrorState?: boolean) => any;\r\n\r\n    constructor(private http: Http) {\r\n        var vm = this;\r\n       \r\n        vm.get = <T>(url: string, data?: any, header?: any, goToErrorState?: boolean) => {\r\n            let urlParams = new URLSearchParams();\r\n            for (let key in data) {\r\n                urlParams.set(key, data[key]);\r\n            }\r\n            let options = new RequestOptions({ method: RequestMethod.Get, url: url, responseType: ResponseContentType.Json, search:urlParams });\r\n\r\n            return this.http.get(url, options)\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n        }\r\n\r\n        vm.getImage = <T>(url: string, data?: any, header?: any, goToErrorState?: boolean) => {\r\n            //let headers = new Headers({ responseType: 'arraybuffer'  });\r\n            //var headers = new Headers();\r\n            // headers.append(\"Content-Type\", 'application/json');\r\n             //headers.append(\"Authorization\", 'Bearer ' + localStorage.getItem('id_token'))\r\n            \r\n            let options = new RequestOptions({ method: RequestMethod.Get, url: url, responseType: ResponseContentType.ArrayBuffer });\r\n            //return this.http.get(url, options);\r\n            return this.http.request(new Request(options));\r\n                //.map(response =>  response)\r\n                //.catch(this.handleError);\r\n        }\r\n        vm.post = <T>(url: string, data?: any, header?: any, goToErrorState?: boolean) => {\r\n            return this.http.post(url, data)\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n        }\r\n\r\n        function getRequest(method: string, url: string, data?: any, header?: any, timeout?: number) {\r\n            var request: any = {\r\n                method: method,\r\n                url: url,\r\n                data: null,\r\n                params: null,\r\n                headers: null,\r\n            };\r\n\r\n            if (data)\r\n                request.data = data;\r\n            \r\n            if (header)\r\n                request.headers = header;\r\n            if (timeout)\r\n                request.timeout = timeout;\r\n            return request\r\n        }\r\n    }\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}