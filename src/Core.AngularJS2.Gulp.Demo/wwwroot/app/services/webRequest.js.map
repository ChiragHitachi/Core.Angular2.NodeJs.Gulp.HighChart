{"version":3,"sources":["services/webRequest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAQa,UAAU;gBAInB,oBAAoB,IAAU;oBAA9B,iBAcC;oBAdmB,SAAI,GAAJ,IAAI,CAAM;oBAC1B,IAAI,EAAE,GAAG,IAAI,CAAC;oBAEd,EAAE,CAAC,GAAG,GAAG,UAAI,GAAW,EAAE,IAAU,EAAE,MAAY,EAAE,MAAY,EAAE,cAAwB;wBACtF,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;6BACpB,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;6BAChC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;oBACjC,CAAC,CAAA;oBAED,EAAE,CAAC,IAAI,GAAG,UAAI,GAAW,EAAE,IAAU,EAAE,MAAY,EAAE,MAAY,EAAE,cAAwB;wBACvF,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC;6BAC3B,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;6BAChC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;oBACjC,CAAC,CAAA;gBACL,CAAC;gBACO,gCAAW,GAAnB,UAAoB,KAAe;oBAC/B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;gBAClE,CAAC;gBACL,iBAAC;YAAD,CAvBA,AAuBC,IAAA;YAvBY,UAAU;gBADtB,iBAAU,EAAE;iDAKiB,WAAI;eAJrB,UAAU,CAuBtB;;QAAA,CAAC","file":"webRequest.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { IResponse } from \"../models/viewModels\";\r\nimport { IWebRequest } from \"../interfaces/interfaces\";\r\n\r\n\r\n@Injectable()\r\nexport class WebRequest implements IWebRequest {\r\n    get: <T>(url: string, data?: any, params?: any, header?: any, goToErrorState?: boolean) => Observable<IResponse<T>>;\r\n    post: <T>(url: string, data?: any, params?: any, header?: any, goToErrorState?: boolean) => Observable<IResponse<T>>;\r\n\r\n    constructor(private http: Http) {\r\n        var vm = this;\r\n\r\n        vm.get = <T>(url: string, data?: any, params?: any, header?: any, goToErrorState?: boolean) => {\r\n            return this.http.get(url)\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n        }\r\n\r\n        vm.post = <T>(url: string, data?: any, params?: any, header?: any, goToErrorState?: boolean) => {\r\n            return this.http.post(url, data)\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n        }\r\n    }\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}