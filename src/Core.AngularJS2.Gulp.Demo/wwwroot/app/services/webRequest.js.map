{"version":3,"sources":["services/webRequest.ts"],"names":["WebRequest","http","_this","this","vm","get","url","data","params","header","goToErrorState","map","response","json","catch","handleError","post","prototype","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","http_1","Http"],"mappings":"06BAQaA,WAAU,WAInB,QAAAA,YAAoBC,MAApB,GAAAC,OAAAC,IAAoBA,MAAAF,KAAAA,IAChB,IAAIG,IAAKD,IAETC,IAAGC,IAAM,SAAIC,IAAaC,KAAYC,OAAcC,OAAcC,gBAC9D,MAAOR,OAAKD,KAAKI,IAAIC,KAChBK,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMZ,MAAKa,cAGpBX,GAAGY,KAAO,SAAIV,IAAaC,KAAYC,OAAcC,OAAcC,gBAC/D,MAAOR,OAAKD,KAAKe,KAAKV,IAAKC,MACtBI,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMZ,MAAKa,cAO5B,MAJYf,YAAAiB,UAAAF,YAAR,SAAoBG,OAEhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAML,OAAOK,OAAS,iBAEtDlB,cAvBaA,WAAUuB,YADtBC,OAAAC,6CAK6BC,OAAAC,QAJjB3B","file":"webRequest.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { IResponse } from \"../models/viewModels\";\r\nimport { IWebRequest } from \"../interfaces/interfaces\";\r\n\r\n\r\n@Injectable()\r\nexport class WebRequest implements IWebRequest {\r\n    get: <T>(url: string, data?: any, params?: any, header?: any, goToErrorState?: boolean) => Observable<IResponse<T>>;\r\n    post: <T>(url: string, data?: any, params?: any, header?: any, goToErrorState?: boolean) => Observable<IResponse<T>>;\r\n\r\n    constructor(private http: Http) {\r\n        var vm = this;\r\n\r\n        vm.get = <T>(url: string, data?: any, params?: any, header?: any, goToErrorState?: boolean) => {\r\n            return this.http.get(url)\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n        }\r\n\r\n        vm.post = <T>(url: string, data?: any, params?: any, header?: any, goToErrorState?: boolean) => {\r\n            return this.http.post(url, data)\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n        }\r\n    }\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}